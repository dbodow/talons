{"version":3,"sources":["webpack:///webpack/bootstrap 1bb737ba1cc1f9b06c57","webpack:///./util/util.js","webpack:///./src/organism.js","webpack:///./src/organisms_controller.js","webpack:///./src/main.js","webpack:///./src/simulation_params.js","webpack:///./src/simulation.js","webpack:///./src/panorama.js","webpack:///./src/background.js","webpack:///./src/zoo.js","webpack:///./src/predators_controller.js","webpack:///./src/predator.js","webpack:///./src/preys_controller.js","webpack:///./src/prey.js","webpack:///./src/field.js","webpack:///./src/graph.js","webpack:///./src/sliders.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;AC7DA;;AAEA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;;AAEA,0BAAiC,KAAK;AACtC;AACA;AACA,CAAC;AAAA;AAAA;;AAED;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AAAA;AAAA;;;;;;;;;AClDA;;AAGyC;;AAEzC;AACA,eAAe,iCAAiC;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,cAAc;AAClC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;AC5EA;;AAGsB;;AAEtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AAAA;AAAA;;;;;;;;;;;;AC/BA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,CAAC;;;;;;;;ACrCD;;AAEA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,oBAAoB;AACrD,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA,4BAA4B,oBAAoB;AAChD;AACA,wCAAwC;AACxC;AACA,2BAA2B;AAC3B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;;;ACrEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,MAAM;AACX;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;;ACzDA;;AAEA;AACmC;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAsB,EAAE;AACxB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;AACL;;;AAGA;AAAA;AAAA;;;;;;;;AC3FA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,6BAA6B,oBAAoB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;;;AClCA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,6BAA6B;AAChD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;;;AClFA;;AAEA;AACA;AAC0B;;AAE1B;AACA,eAAe,0CAA0C;AACzD;AACA;AACA,4BAA4B,sBAAsB;AAClD;;AAEA,qBAAqB,sBAAsB;AAC3C,mBAAmB,WAAW;AAC9B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yBAAyB,mCAAmC;AAC5D;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AAAA;AAAA;;;;;;;;;ACnEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,8BAA8B;AACtD;AACA;AACA,iC;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;;;ACpBA;;AAEA;AACA;AAC0B;;AAE1B;AACA,eAAe,wDAAwD;AACvE;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;;AAEA,iBAAiB,kBAAkB;AACnC,mBAAmB,WAAW;AAC9B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,iDAAiD;AACtE;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AAAA;AAAA;;;;;;;;;AC/DA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,oBAAoB,MAAM;AAC1B;AACA;AACA;AAAA;AAAA;;;;;;;;;ACZA;;AAGoD;;AAEpD;AACA,eAAe,8BAA8B,GAAG,cAAc;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,MAAM,KAAK;AACX,4CAA4C,gCAAgC;AAC5E,8CAA8C,gCAAgC;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM,KAAK;AACX;AACA;AACA;AACA;AACA,4CAA4C,gCAAgC;AAC5E,8CAA8C,gCAAgC;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,8BAA8B;AACnD;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;ACjGoB;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AAAA;AAAA;;;;;;;;ACxGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,yCAAyC;AACrE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 1bb737ba1cc1f9b06c57","'use strict';\n\nexport const positiveMod = (n, m) => (\n  ((n % m) + m) % m\n);\n\n// computed the horizontal distance between two points\n// accounting for the panorama's wrapping\nexport const distanceX = (x1, x2, width) => {\n  const smaller = Math.min(x1, x2);\n  const larger = Math.max(x1, x2);\n  const innerDistance = larger - smaller;\n  const outerDistance = smaller + width - larger;\n  return Math.min(innerDistance, outerDistance);\n};\n\nexport const distanceY = (y1, y2) => {\n  return Math.abs(y2 - y1);\n};\n\nexport const distance = (x1, y1, x2, y2, width) => {\n  return Math.sqrt(Math.pow(distanceY(y1, y2), 2) +\n                   Math.pow(distanceX(x1, x2, width), 2));\n};\n\nexport const fieldCellCoords = ({x, y}, fieldNetSize) => ({\n  x: Math.floor(x / fieldNetSize),\n  y: Math.floor(y / fieldNetSize)\n});\n\nexport const gravitation = dist => {\n  if (dist === 0) {\n    // avoid singularities;\n    return 100;\n  } else {\n    return Math.pow(dist, -2);\n  }\n};\n\n// inspired by https://stackoverflow.com/questions/1114465/getting-mouse-location-in-canvas\nexport const getMousePos = (canvas, e) => {\n  const rect = canvas.getBoundingClientRect();\n  return {\n    x: e.clientX - rect.left,\n    y: e.clientY - rect.top\n  };\n};\n\nexport const fitToAxis = (value, valueMax, axisMax) => (\n  (value / valueMax) * axisMax\n);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./util/util.js\n// module id = 0\n// module chunks = 0","'use strict';\n\nimport { positiveMod, fieldCellCoords, gravitation,\n         distance, distanceX, distanceY } from '../util/util';\n\nexport default class Organism {\n  constructor({speed, radius, color, perception}, panoramaSize) {\n    this.speed = speed;\n    this.radius = radius;\n    this.color = color;\n    this.perception = perception;\n    this.initializeCenter(panoramaSize);\n    this.initializeDirection();\n  }\n\n  initializeCenter({width, height}) {\n    this.center = {\n      x: Math.random() * width,\n      y: (Math.random() * (height - (2 * this.radius))) + this.radius\n    };\n  }\n\n  initializeDirection() {\n    // sample as an angle for a uniform radial distribution\n    // i.e. don't bias directions to the diagonals via a cartesian ransom sample\n    const radialDirection = Math.random() * 2 * Math.PI;\n    this.direction = {\n      x: Math.cos(radialDirection),\n      y: Math.sin(radialDirection)\n    };\n  }\n\n  moveOrganism({width, height}) {\n    this.center = {\n      x: positiveMod(this.center.x + this.dxdt(), width),\n      y: this.center.y + this.dydt()\n    };\n    this.resolveBounces(height);\n  }\n\n  dydt() {\n    return this.speed * this.direction.y;\n  }\n\n  dxdt() {\n    return this.speed * this.direction.x;\n  }\n\n  minHeight() {\n    return this.radius;\n  }\n\n  maxHeight(height) {\n    return height - this.radius;\n  }\n\n  resolveBounces(height) {\n    if (this.center.y > this.maxHeight(height)) {\n      const overflow = this.center.y - this.maxHeight(height);\n      this.center.y -= overflow;\n      this.direction.y = -1 * this.direction.y;\n    } else if (this.center.y < this.minHeight()) {\n      const underflow = this.minHeight() - this.center.y;\n      this.center.y += underflow;\n      this.direction.y = -1 * this.direction.y;\n    }\n  }\n\n  updateDirection(field) {\n    const gradient = field.constructGradient(this);\n    const totalSpeed = Math.sqrt( Math.pow(this.direction.x + (gradient.x / this.perception), 2) +\n                                  Math.pow(this.direction.y + (gradient.y / this.perception), 2) );\n    const normalization = 1 / totalSpeed;\n    this.direction.x = (this.direction.x + (gradient.x / this.perception)) * normalization;\n    this.direction.y = (this.direction.y + (gradient.y / this.perception)) * normalization;\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/organism.js\n// module id = 1\n// module chunks = 0","'use strict';\n\nimport { distance, distanceY, positiveMod,\n         gravitation } from '../util/util';\n\nexport default class OrganismsController {\n  constructor(reproductionPeriod) {\n    this.organisms = [];\n    this.lastReproduced = Date.now();\n    this.reproductionPeriod = reproductionPeriod;\n  }\n\n  moveOrganisms(panoramaSize, field) {\n    this.updateDirections(field);\n    this.organisms.forEach( organism => {\n      organism.moveOrganism(panoramaSize);\n    });\n  }\n\n  updateDirections(field) {\n    this.organisms.forEach( organism => {\n      organism.updateDirection(field);\n    });\n  }\n\n  killOrganisms(condemnedList) {\n    condemnedList.forEach( organism => {\n      const condemnedIdx = this.organisms.indexOf(organism);\n      this.organisms.splice(condemnedIdx, 1);\n    });\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/organisms_controller.js\n// module id = 2\n// module chunks = 0","'use strict';\n\nimport SimulationParams from './simulation_params';\nimport Simulation from './simulation';\nimport Sliders from './sliders';\n\n// This file manages interaction with the HTML document\n\ndocument.addEventListener(\"DOMContentLoaded\", function(event) {\n  const canvas = document.getElementById(\"canvas\");\n  const graph = document.getElementById(\"graph\");\n  const sliderEls = {\n    predatorsSliders: {\n      count: document.getElementById(\"predator-count\"),\n      speed: document.getElementById(\"predator-speed\"),\n      perception: document.getElementById(\"predator-perception\"),\n      efficiency: document.getElementById(\"predator-efficiency\"),\n      reproduction: document.getElementById(\"predator-reproduction\")\n    },\n    preysSliders: {\n      count: document.getElementById(\"prey-count\"),\n      speed: document.getElementById(\"prey-speed\"),\n      camoflage: document.getElementById(\"prey-camoflage\"),\n      capacity: document.getElementById(\"prey-capacity\"),\n      reproduction: document.getElementById(\"prey-reproduction\")\n    },\n    controls: {\n      play: document.getElementById(\"play-button\"),\n      pause: document.getElementById(\"pause-button\"),\n      restart: document.getElementById(\"restart-button\")\n    }\n  };\n  const simulationParams = new SimulationParams;\n  const simulation = new Simulation(canvas, graph, simulationParams);\n  const sliders = new Sliders(sliderEls, simulation, simulationParams);\n  // simulation.loadAssets(); // fetch images from server for user in canvas\n  simulation.begin();\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/main.js\n// module id = 3\n// module chunks = 0","'use strict';\n\n// SimulationParams: controls the parameters for the simulation.\n// Allows users to adjust input; manages event listeners to\n// determine this input.\nexport default class SimulationParams {\n  constructor() {\n    //set defaults\n    this.predatorCount = 20;\n    this.predatorSpeed = 15;\n    this.predatorRadius = 40;\n    this.predatorGravitationNbhd = 10;\n    this.predatorColor = '#354b6d';\n    this.predatorEfficiency = 10000;\n    this.predatorPerception = 25; // lower is better; this is a 1/x weight\n    this.predatorReproductionPeriod = 12000; // should be longer than efficiency\n    this.preyCount = 50;\n    this.preySpeed = 10;\n    this.preyRadius = 10;\n    this.preyGravitationNbhd = 20;\n    this.preyColor = '#efe092';\n    this.preyPerception = 7; // lower is better; this is a 1/x weight\n    this.preyCamoflage = 0.5;\n    this.preyReproductionPeriod = 10000; // should be longer than efficiency\n    this.preyCarryingCapacity = 200;\n    this.fieldNetSize = 10; // Must be smaller than radius/sqrt(2)!\n  }\n\n  predatorsParams() {\n    return {\n      count: this.predatorCount,\n      predatorParams: {\n        speed: this.predatorSpeed,\n        radius: this.predatorRadius,\n        color: this.predatorColor,\n        efficiency: this.predatorEfficiency,\n        perception: this.predatorPerception\n      },\n      reproductionPeriod: this.predatorReproductionPeriod\n    };\n  }\n\n  preysParams() {\n    return {\n      count: this.preyCount,\n      preyParams: {\n        speed: this.preySpeed,\n        radius: this.preyRadius,\n        color: this.preyColor,\n        perception: this.preyPerception\n      },\n      reproductionPeriod: this.preyReproductionPeriod,\n      carryingCapacity: this.preyCarryingCapacity\n    };\n  }\n\n  predatorFieldParams() {\n    return {\n      fieldNetSize: this.fieldNetSize,\n      gravitationNbhd: this.predatorGravitationNbhd\n    };\n  }\n\n  preyFieldParams() {\n    return {\n      fieldNetSize: this.fieldNetSize,\n      gravitationNbhd: Math.round(this.preyGravitationNbhd * this.preyCamoflage)\n    };\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/simulation_params.js\n// module id = 4\n// module chunks = 0","'use strict';\n\nimport Panorama from './panorama';\nimport Zoo from './zoo';\nimport Graph from './graph';\n\nexport default class Simulation {\n  constructor(canvas, graphCanvas, simulationParams) {\n    this.simulationParams = simulationParams;\n    this.canvas = canvas;\n    this.graphCanvas = graphCanvas;\n    this.graph = new Graph(graphCanvas, simulationParams);\n    this.panorama = new Panorama(this.canvas);\n    this.zoo = new Zoo(this.simulationParams.predatorsParams(),\n                       this.simulationParams.preysParams(),\n                       this.simulationParams.predatorFieldParams(),\n                       this.simulationParams.preyFieldParams(),\n                       this.panorama.panoramaSize);\n  }\n\n  begin() {\n    this.ticker = setInterval(() => {\n      this.panorama.updateDx();\n      this.zoo.tick();\n      this.panorama.draw(this.zoo);\n      this.graph.draw(this.zoo);\n    }, 42); //42 mHz = 24 fps\n  }\n\n  togglePlaying(bool) {\n    if (bool) {\n      this.begin();\n    } else {\n      clearInterval(this.ticker);\n    }\n  }\n\n  updateOrganisms(newParams) {\n    this.zoo.updateOrganisms(newParams);\n    this.graph.updateOrganisms(newParams.preysParams);\n  }\n\n  updatePreysField(newParams) {\n    this.zoo.updatePreysField(newParams);\n  }\n\n  restart() {\n    clearInterval(this.ticker);\n    this.graph = new Graph(this.graphCanvas, this.simulationParams);\n    this.panorama = new Panorama(this.canvas);\n    this.zoo = new Zoo(this.simulationParams.predatorsParams(),\n                       this.simulationParams.preysParams(),\n                       this.simulationParams.predatorFieldParams(),\n                       this.simulationParams.preyFieldParams(),\n                       this.panorama.panoramaSize);\n    this.begin();\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/simulation.js\n// module id = 5\n// module chunks = 0","'use strict';\n\nimport Background from './background';\nimport { positiveMod, getMousePos } from '../util/util';\n\n// handles all logic for the wrapping panorama and drawing all canvas items\n// in particular, tracks offset for drawing based on user scroll\nexport default class Panorama {\n  constructor(canvas) {\n    this.background = new Background(canvas);\n    this.ctx = canvas.getContext('2d');\n    this.panoramaSize = this.background.imageSize;\n    this.canvasSize = this.background.canvasSize;\n\n    this.dx = 0;\n    this.isDampening = false;\n    this.cursorOffsetX = 0;\n\n    this.setCanvasListeners(canvas);\n  }\n\n  // loadAssets() {\n  //   let loaded = false;\n  //   this.background.\n  // }\n\n  draw(zoo) {\n    if (this.background.loaded) {\n      this.background.draw(this.dx);\n      this.drawOrganisms(zoo.preysController);\n      this.drawOrganisms(zoo.predatorsController);\n    }\n  }\n\n  drawOrganisms(controller) {\n    controller.organisms.forEach( organism => {\n      this.drawOrganism(organism);\n    });\n  }\n\n  drawOrganism(organism) {\n    this.ctx.beginPath();\n    this.ctx.arc(positiveMod(organism.center.x - this.dx, this.panoramaSize.width),\n                 organism.center.y, organism.radius, 0, 2 * Math.PI);\n    this.ctx.fillStyle = organism.color;\n    this.ctx.strokeStyle = '#476189';\n    this.ctx.fill();\n    this.ctx.lineWidth = 5;\n    this.ctx.stroke();\n  }\n\n  updateDx() {\n    this.dampenStaleCursorInput();\n    this.dx += this.cursorOffsetX * 0.075;\n    this.dx = positiveMod(this.dx, this.panoramaSize.width);\n  }\n\n  toggleDampening(bool) {\n    this.isDampening = bool;\n  }\n\n  dampenStaleCursorInput() {\n    if (this.isDampening) {\n      this.cursorOffsetX = this.cursorOffsetX * 0.8;\n      if (Math.abs(this.cursorOffsetX) < 1) {\n        this.cursorOffsetX = 0;\n      }\n    }\n  }\n\n  updateCursorOffset({x}) {\n    if (Math.abs(this.canvasSize.width / 2 - x) > this.canvasSize.width / 3) {\n      this.toggleDampening(false);\n      this.cursorOffsetX = x - (this.canvasSize.width / 2);\n    } else {\n      this.toggleDampening(true);\n    }\n  }\n\n  setCanvasListeners(canvas) {\n    canvas.addEventListener('mousemove', e => {\n      const mousePos = getMousePos(canvas, e);\n      this.updateCursorOffset(mousePos);\n    });\n\n    canvas.addEventListener('mouseout', () => {\n      this.toggleDampening(true);\n    });\n  }\n\n\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/panorama.js\n// module id = 6\n// module chunks = 0","'use strict';\n\nconst backgroundPath = 'https://s3-us-west-1.amazonaws.com/talons-dev/final-background-cropped.jpeg';\n\nexport default class Background {\n  // eventually refactor into background and panorama classes\n  constructor(canvas) {\n    this.ctx = canvas.getContext('2d');\n    this.img = new Image(3000, 750);\n    this.img.onload = () => { this.loaded = true; };\n    this.img.src = backgroundPath;\n    this.loaded = false;\n    this.imageSize = {\n      width: this.img.width,\n      height: this.img.height\n    };\n    console.log(this.imageSize);\n    this.canvasSize = {\n      width: canvas.width,\n      height: canvas.height\n    };\n  }\n\n  draw(dx) {\n    this.ctx.drawImage(this.img, -dx, 0);\n    // only perform second draw of stitched image when necessary\n    if (this.doesImageNeedStitching(dx)) {\n      this.ctx.drawImage(this.img, this.imageSize.width - dx, 0);\n    }\n  }\n\n  doesImageNeedStitching(dx) {\n    return dx > (this.imageSize.width - this.canvasSize.width);\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/background.js\n// module id = 7\n// module chunks = 0","'use strict';\n\nimport PredatorsController from './predators_controller';\nimport PreysController from './preys_controller';\nimport Field from './field';\n\nexport default class Zoo {\n  constructor(predatorsParams, preysParams,\n              predatorFieldParams, preyFieldParams, panoramaSize) {\n    this.panoramaSize = panoramaSize;\n    this.predatorsController = new PredatorsController(predatorsParams, panoramaSize);\n    this.preysController = new PreysController(preysParams, panoramaSize);\n    this.predatorsField = new Field(predatorFieldParams, panoramaSize, -1);\n    this.preysField = new Field(preyFieldParams, panoramaSize, 1);\n  }\n\n  updateOrganisms({predatorsParams, preysParams}) {\n    this.predatorsController.updatePredatorsParams(predatorsParams);\n    this.preysController.updatePreysParams(preysParams);\n  }\n\n  updatePreysField(preyFieldParams) {\n    this.preysField.updateFieldParams(preyFieldParams);\n  }\n\n  tick() {\n    this.feed();\n    this.starve();\n    this.calculateFields();\n    this.moveOrganisms();\n    this.reproduce();\n  }\n\n  moveOrganisms() {\n    this.movePredators();\n    this.movePrey();\n  }\n\n  movePredators() {\n    this.predatorsController.moveOrganisms(this.panoramaSize, this.preysField);\n  }\n\n  movePrey() {\n    this.preysController.moveOrganisms(this.panoramaSize, this.predatorsField);\n  }\n\n  calculateFields() {\n    this.calculatePredatorsField();\n    this.calculatePreysField();\n  }\n\n  calculatePredatorsField() {\n    this.predatorsField.calculateField(this.predatorsController);\n  }\n\n  calculatePreysField() {\n    this.preysField.calculateField(this.preysController);\n  }\n\n  // construct a hash of preys' locations on the field grid, with\n  // coords pointing to the top prey on a given tile (O(preys) time)\n  // Then, each predator can check the hash at its own location to\n  // find food (O(predators) time). Total: O(predators + preys)\n  feed() {\n    const preysLocations = this.calculatePreysLocations();\n    const eaten = this.predatorsController.feed(preysLocations, this.preysField.fieldNetSize);\n    this.preysController.killOrganisms(eaten);\n  }\n\n  calculatePreysLocations() {\n    return this.preysController.revealLocations(this.preysField.fieldNetSize);\n  }\n\n  starve() {\n    this.predatorsController.starvePredators();\n    this.preysController.starvePreys();\n  }\n\n  reproduce() {\n    this.predatorsController.reproducePredators(this.panoramaSize);\n    this.preysController.reproducePreys(this.panoramaSize);\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/zoo.js\n// module id = 8\n// module chunks = 0","'use strict';\n\nimport Predator from './predator';\nimport OrganismsController from './organisms_controller';\nimport { fieldCellCoords } from '../util/util';\n\nexport default class PredatorsController extends OrganismsController {\n  constructor({predatorParams, count, reproductionPeriod}, panoramaSize) {\n    super(reproductionPeriod);\n    this.predatorParams = predatorParams;\n    this.populatePredators({predatorParams, count}, panoramaSize);\n  }\n\n  populatePredators({count, predatorParams}, panoramaSize) {\n    for (let i = 0; i < count; i++) {\n      this.createPredator(predatorParams, panoramaSize);\n    }\n  }\n\n  createPredator(predatorParams, panoramaSize) {\n    const predator = new Predator(predatorParams, panoramaSize);\n    this.organisms.push(predator);\n  }\n\n  feed(preysLocations, fieldNetSize) {\n    const eaten = [];\n    this.organisms.forEach( predator => {\n      const predatorCoords = fieldCellCoords(predator.center, fieldNetSize);\n      const food = preysLocations[predatorCoords.x] ?\n        preysLocations[predatorCoords.x][predatorCoords.y] : null;\n      if (food) {\n        eaten.push(food);\n        predator.feed();\n      }\n    });\n    return Array.from(new Set(eaten));\n  }\n\n  starvePredators() {\n    const starved = [];\n    const currentTime = Date.now();\n    this.organisms.forEach( predator => {\n      if (currentTime - predator.lastAte > predator.efficiency) {\n        starved.push(predator);\n      }\n    });\n    this.killOrganisms(starved);\n  }\n\n  reproducePredators(panoramaSize) {\n    if (Date.now() - this.lastReproduced > this.reproductionPeriod) {\n      const populateParams = {\n        count: this.organisms.length,\n        predatorParams: this.predatorParams\n      };\n      this.populatePredators(populateParams, panoramaSize);\n      this.lastReproduced = Date.now();\n    }\n  }\n\n  updatePredatorsParams({predatorParams, reproductionPeriod}) {\n    this.predatorParams = predatorParams;\n    this.reproductionPeriod = reproductionPeriod;\n    this.organisms.forEach( predator => {\n      predator.updatePredatorParams(predatorParams);\n    });\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/predators_controller.js\n// module id = 9\n// module chunks = 0","'use strict';\n\nimport Organism from './organism';\n\nexport default class Predator extends Organism {\n  constructor(predatorParams, panoramaSize) {\n    super(predatorParams, panoramaSize);\n    this.lastAte = Date.now();\n    this.efficiency = predatorParams.efficiency;\n  }\n\n  updatePredatorParams({speed, efficiency, perception}) {\n    this.speed = speed;\n    this.efficiency = efficiency;\n    this.perception = perception; \n  }\n\n  feed(preys) {\n    this.lastAte = Date.now();\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/predator.js\n// module id = 10\n// module chunks = 0","'use strict';\n\nimport Prey from './prey';\nimport OrganismsController from './organisms_controller';\nimport { fieldCellCoords } from '../util/util';\n\nexport default class PreysController extends OrganismsController {\n  constructor({preyParams, count, reproductionPeriod, carryingCapacity},\n              panoramaSize) {\n    super(reproductionPeriod);\n    this.preyParams = preyParams;\n    this.carryingCapacity = carryingCapacity;\n    this.populatePreys({count, preyParams}, panoramaSize);\n  }\n\n  populatePreys({count, preyParams}, panoramaSize) {\n    for (let i = 0; i < count; i++) {\n      this.createPrey(preyParams, panoramaSize);\n    }\n  }\n\n  createPrey(preyParams, panoramaSize) {\n    const prey = new Prey(preyParams, panoramaSize);\n    this.organisms.push(prey);\n  }\n\n  revealLocations(fieldNetSize) {\n    const locations = {};\n    this.organisms.forEach( prey => {\n      const preyCoords = fieldCellCoords(prey.center, fieldNetSize);\n      locations[preyCoords.x] = locations[preyCoords.x] || [];\n      locations[preyCoords.x][preyCoords.y] = prey;\n    });\n    return locations;\n  }\n\n  reproducePreys(panoramaSize) {\n    if (Date.now() - this.lastReproduced > this.reproductionPeriod) {\n      const populateParams = {\n        count: this.organisms.length,\n        preyParams: this.preyParams\n      };\n      this.populatePreys(populateParams, panoramaSize);\n      this.lastReproduced = Date.now();\n    }\n  }\n\n  starvePreys() {\n    if (this.organisms.length > this.carryingCapacity) {\n      const middleIdx = Math.floor(this.organisms.length / 2);\n      this.organisms = this.organisms.slice(middleIdx);\n    }\n  }\n\n  updatePreysParams({preyParams, reproductionPeriod, carryingCapacity}) {\n    this.preyParams = preyParams;\n    this.reproductionPeriod = reproductionPeriod;\n    this.carryingCapacity = carryingCapacity;\n    console.log(this.reproductionPeriod);\n    this.organisms.forEach( prey => {\n      prey.updatePreyParams(preyParams);\n    });\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/preys_controller.js\n// module id = 11\n// module chunks = 0","'use strict';\n\nimport Organism from './organism';\n\nexport default class Prey extends Organism {\n  constructor(preyParams, panoramaSize) {\n    super(preyParams, panoramaSize);\n  }\n\n  updatePreyParams({speed}) {\n    this.speed = speed;\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/prey.js\n// module id = 12\n// module chunks = 0","'use strict';\n\nimport { distanceY, distanceX, distance,\n         fieldCellCoords, positiveMod, gravitation } from '../util/util';\n\nexport default class Field {\n  constructor({fieldNetSize, gravitationNbhd}, {height, width}, sgn) {\n    this.fieldSize = {\n      rowCount: Math.ceil(height / fieldNetSize),\n      colCount: Math.ceil(width / fieldNetSize)\n    };\n    this.fieldNetSize = fieldNetSize;\n    this.gravitationNbhd = gravitationNbhd;\n    this.sgn = sgn;\n    this.initializeField(this.fieldSize);\n  }\n\n  initializeField({rowCount, colCount}) {\n    this.field = Array(rowCount).fill(0).map(el => (\n      Array(colCount).fill(0)\n    ));\n  }\n\n  resetField() {\n    const rowIdxs = Object.keys(this.field);\n    const centerRowIdx = rowIdxs[Math.floor(rowIdxs.length/2)];\n    rowIdxs.forEach( rowIdx => {\n      const colIdxs = Object.keys(this.field[rowIdx]);\n      const distCenterRow = distanceY(centerRowIdx, rowIdx);\n      colIdxs.forEach( colIdx => {\n        // prevent clustering on edges\n        this.field[rowIdx][colIdx] = (distCenterRow / centerRowIdx) / 1000;\n      });\n    });\n  }\n\n  calculateField(organismsController) {\n    this.resetField();\n    organismsController.organisms.forEach( organism => {\n      this.updateField(organism);\n    });\n  }\n\n  updateField(organism) {\n    let x, y;\n    ({x, y} = this.fieldPosition(organism));\n    for (let row = y - this.gravitationNbhd; row < y + this.gravitationNbhd; row++) {\n      for (let col = x - this.gravitationNbhd; col < x + this.gravitationNbhd; col++) {\n        // JS will get mad if you try to change the iterator mid loop.\n        let modCol = col;\n        if (row < 0 || row >= this.fieldSize.rowCount) continue;\n        if (modCol < 0 || modCol >= this.fieldSize.colCount) {\n          modCol = positiveMod(modCol, Math.floor(this.fieldSize.colCount));\n        }\n        const pointVector = this.sgn * gravitation(distance(x, y, modCol, row, this.fieldSize.colCount));\n        this.field[row][modCol] += pointVector;\n      }\n    }\n  }\n\n  fieldPosition(organism) {\n    return fieldCellCoords(organism.center, this.fieldNetSize);\n  }\n\n  // use the field of other organisms to construct a gradient for an organism\n  constructGradient(organism) {\n    let x, y;\n    ({x, y} = this.fieldPosition(organism));\n    const gradient = {\n      x: 0,\n      y: 0\n    };\n    for (let row = y - this.gravitationNbhd; row < y + this.gravitationNbhd; row++) {\n      for (let col = x - this.gravitationNbhd; col < x + this.gravitationNbhd; col++) {\n        let modCol = col;\n        if (row < 0 || row >= this.fieldSize.rowCount) continue;\n        if (col === x || row === y) continue;\n        modCol = positiveMod(modCol, this.fieldSize.colCount);\n        const dist = distance(col, row, x, y, this.fieldSize.colCount);\n        const weight = gravitation(dist);\n        const xDist = distanceX(x, modCol, this.fieldSize.rowCount);\n        const yDist = distanceY(y, row);\n        const sin = yDist / dist;\n        const cos = xDist / dist;\n        const sgnX = (col > x) ? 1 : -1 ;\n        const sgnY = (row > y) ? 1 : -1 ;\n        gradient.x += this.field[row][modCol] * cos * weight * sgnX;\n        gradient.y += this.field[row][modCol] * sin * weight * sgnY;\n      }\n    }\n    return gradient;\n  }\n\n  updateFieldParams({fieldNetSize, gravitationNbhd}) {\n    this.fieldNetSize = fieldNetSize;\n    this.gravitationNbhd = gravitationNbhd;\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/field.js\n// module id = 13\n// module chunks = 0","import { fitToAxis } from '../util/util';\n\nexport default class Graph {\n  constructor(graphCanvas, simulationParams) {\n    this.graphCanvas = graphCanvas;\n    this.canvasSize = {\n      x: graphCanvas.width,\n      y: graphCanvas.height\n    };\n    this.ctx = graphCanvas.getContext('2d');\n    this.carryingCapacity = simulationParams.preyCarryingCapacity;\n    this.lastCoords = [{\n      predatorsCount: simulationParams.predatorCount,\n      preysCount: simulationParams.preyCount\n    }];\n    this.lastDraw = Date.now();\n    this.predatorColor = simulationParams.predatorColor;\n    this.preyColor = simulationParams.preyColor;\n  }\n\n  draw(zoo) {\n    if (Date.now() - this.lastDraw > 1000) {\n      this.updateDatapoints(zoo);\n      this.ctx.clearRect(0, 0, this.canvasSize.x, this.canvasSize.y);\n      this.drawData();\n      this.drawAxes();\n      this.lastDraw = Date.now();\n    }\n  }\n\n  updateDatapoints(zoo) {\n    const predatorsCount = zoo.predatorsController.organisms.length;\n    const preysCount = zoo.preysController.organisms.length;\n    this.lastCoords.push({\n      predatorsCount,\n      preysCount\n    });\n    if (this.lastCoords.length > 100) {\n      this.lastCoords = this.lastCoords.slice(1);\n    }\n  }\n\n  drawData() {\n    this.drawPredatorData();\n    this.drawPreyData();\n  }\n\n  drawPredatorData() {\n    const xIncrement = Math.floor(this.canvasSize.x / 100);\n    let xCoord = 0;\n    this.ctx.strokeStyle = this.predatorColor;\n    this.ctx.lineWidth = 2;\n    this.ctx.beginPath();\n    this.ctx.moveTo(xCoord,\n      this.canvasSize.y - fitToAxis(this.lastCoords[0].predatorsCount,\n        this.carryingCapacity, this.canvasSize.y));\n    xCoord += xIncrement;\n    this.lastCoords.slice(1).forEach((coord, idx) => {\n      this.ctx.lineTo(xCoord, this.canvasSize.y - fitToAxis(coord.predatorsCount,\n          this.carryingCapacity, this.canvasSize.y));\n      this.ctx.stroke();\n      xCoord += xIncrement;\n    });\n  }\n\n  drawPreyData() {\n    const xIncrement = Math.floor(this.canvasSize.x / 100);\n    let xCoord = 0;\n    this.ctx.strokeStyle = this.preyColor;\n    this.ctx.lineWidth = 2;\n    this.ctx.beginPath();\n    this.ctx.moveTo(xCoord,\n      this.canvasSize.y - fitToAxis(this.lastCoords[0].preysCount,\n        this.carryingCapacity, this.canvasSize.y));\n        // debugger;\n    xCoord += xIncrement;\n    this.lastCoords.slice(1).forEach((coord, idx) => {\n      this.ctx.lineTo(xCoord, this.canvasSize.y - fitToAxis(coord.preysCount,\n          this.carryingCapacity, this.canvasSize.y));\n      this.ctx.stroke();\n      xCoord += xIncrement;\n    });\n  }\n\n  drawAxes() {\n    this.ctx.strokeStyle = '#ffffff';\n    this.ctx.lineWidth = 2;\n\n    // x-axis\n    this.ctx.beginPath();\n    this.ctx.moveTo(0, this.canvasSize.y-1);\n    this.ctx.lineTo(this.canvasSize.x, this.canvasSize.y-1);\n    this.ctx.stroke();\n\n    // y-axis\n    this.ctx.beginPath();\n    this.ctx.moveTo(1, 0);\n    this.ctx.lineTo(1, this.canvasSize.y);\n    this.ctx.stroke();\n  }\n\n  updateOrganisms({carryingCapacity}) {\n    this.carryingCapacity = carryingCapacity;\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/graph.js\n// module id = 14\n// module chunks = 0","'use strict';\n\nexport default class Sliders {\n  constructor(sliderEls, simulation, simulationParams) {\n    this.simulation = simulation;\n    this.simulationParams = simulationParams;\n    this.initializeEventListeners(sliderEls);\n    this.isPlaying = true;\n  }\n\n  initializeEventListeners({predatorsSliders, preysSliders, controls}) {\n    this.initializePredatorsEventListeners(predatorsSliders);\n    this.initializePreysEventListeners(preysSliders);\n    this.initializeControlsEventListeners(controls);\n  }\n\n  initializePredatorsEventListeners(predatorsSliders) {\n    predatorsSliders.count.addEventListener('mouseup', e => {\n      this.simulationParams.predatorCount = e.target.value;\n    });\n    predatorsSliders.speed.addEventListener('mouseup', e => {\n      this.simulationParams.predatorSpeed = e.target.value;\n      this.updateOrganisms();\n    });\n    predatorsSliders.perception.addEventListener('mouseup', e => {\n      this.simulationParams.predatorPerception = 25 - e.target.value;\n      this.updateOrganisms();\n    });\n    predatorsSliders.efficiency.addEventListener('mouseup', e => {\n      this.simulationParams.predatorEfficiency = e.target.value;\n      this.updateOrganisms();\n    });\n    predatorsSliders.reproduction.addEventListener('mouseup', e => {\n      this.simulationParams.predatorReproductionPeriod = e.target.value;\n      this.updateOrganisms();\n    });\n  }\n\n  initializePreysEventListeners(preysSliders) {\n    preysSliders.count.addEventListener('mouseup', e => {\n      this.simulationParams.preyCount = e.target.value;\n    });\n    preysSliders.speed.addEventListener('mouseup', e => {\n      this.simulationParams.preySpeed = e.target.value;\n      this.updateOrganisms();\n    });\n    preysSliders.camoflage.addEventListener('mouseup', e => {\n      this.simulationParams.preyCamoflage = e.target.value / 100;\n      this.updatePreysField();\n    });\n    preysSliders.capacity.addEventListener('mouseup', e => {\n      this.simulationParams.preyCarryingCapacity = e.target.value;\n      this.updateOrganisms();\n    });\n    preysSliders.reproduction.addEventListener('mouseup', e => {\n      this.simulationParams.preyReproductionPeriod = e.target.value;\n      this.updateOrganisms();\n    });\n  }\n\n  initializeControlsEventListeners(controls) {\n    controls.play.addEventListener('click', e => {\n      this.togglePlaying('play');\n    });\n    controls.pause.addEventListener('click', e => {\n      this.togglePlaying('pause');\n    });\n    controls.restart.addEventListener('click', e => {\n      this.togglePlaying('restart');\n    });\n  }\n\n  updateOrganisms() {\n    this.simulation.updateOrganisms({\n      predatorsParams: this.simulationParams.predatorsParams(),\n      preysParams: this.simulationParams.preysParams()\n    });\n  }\n\n  updatePreysField() {\n    this.simulation.updatePreysField(this.simulationParams.preyFieldParams());\n  }\n\n  togglePlaying(type) {\n    switch (type) {\n      case 'play':\n        if (!this.isPlaying) {\n          this.isPlaying = true;\n          this.simulation.togglePlaying(true);\n        }\n        break;\n      case 'pause':\n        this.isPlaying = false;\n        this.simulation.togglePlaying(false);\n        break;\n      case 'restart':\n        this.isPlaying = true;\n        this.simulation.restart();\n        break;\n    }\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sliders.js\n// module id = 15\n// module chunks = 0"],"sourceRoot":""}
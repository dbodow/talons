{"version":3,"sources":["webpack:///webpack/bootstrap f117e30845f313e7d675","webpack:///./src/main.js","webpack:///./src/panorama.js","webpack:///./src/background.js","webpack:///./src/predators_controller.js","webpack:///./src/predator.js","webpack:///./src/organism.js","webpack:///./src/prey_controller.js","webpack:///./src/user_params.js","webpack:///./src/prey.js","webpack:///./util/util.js","webpack:///./src/organisms_controller.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;;AC7DA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG,MAAM;AACT,CAAC;;;;;;;;;;;;AC7CD;AACA;AACA;AACsB;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAsB,EAAE;AACxB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;ACjEA;AACA;AACA,eAAe,wBAAwB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;;AC5BA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,WAAW;AAC9B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AAAA;AAAA;;;;;;;;;ACjCA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;ACLyC;;AAEzC;AACA,eAAe,qBAAqB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,8CAA8C;AACxG,4DAA4D,8CAA8C;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;;ACpHA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,WAAW;AAC9B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AAAA;AAAA;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;AC5CA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;ACZA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA,CAAC;AAAA;AAAA;;AAED;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AAAA;AAAA;;;;;;;;;ACnCwD;;AAExD;AACA,mDAAmD,8BAA8B;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,oDAAoD,yCAAyC;AAC7F,sDAAsD,yCAAyC;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f117e30845f313e7d675","import Panorama from './panorama';\nimport UserParams from './user_params';\n\n// non-user params\nconst backgroundPath = 'https://s3-us-west-1.amazonaws.com/talons-dev/placeholder-background.jpeg';\n\n// inspired by https://stackoverflow.com/questions/1114465/getting-mouse-location-in-canvas\nfunction getMousePos(canvas, e) {\n  const rect = canvas.getBoundingClientRect();\n  return {\n    x: e.clientX - rect.left,\n    y: e.clientY - rect.top\n  };\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", function(event) {\n  const canvas = document.getElementById(\"canvas\");\n  const backgroundImage = new Image;\n  backgroundImage.src = backgroundPath;\n\n  const userParams = new UserParams(backgroundImage);\n  userParams.setListeners();\n\n  const backgroundParams = {\n    canvas,\n    backgroundImage\n  };\n  const panorama = new Panorama(backgroundParams, userParams);\n\n  let mousePos;\n  panorama.draw();\n\n  canvas.addEventListener('mousemove', e => {\n    mousePos = getMousePos(canvas, e);\n    panorama.updateCursorOffset(mousePos);\n  });\n\n  canvas.addEventListener('mouseout', () => {\n    panorama.toggleDampening(true);\n  });\n\n  setInterval(() => {\n    panorama.updateDx();\n    panorama.draw();\n  }, 42); //42 mHz = 24 fps\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/main.js\n// module id = 0\n// module chunks = 0","import Background from './background';\nimport PredatorsController from './predators_controller';\nimport PreyController from './prey_controller';\nimport { positiveMod } from '../util/util';\n\nexport default class Panorama {\n  constructor(backgroundParams, userParams) {\n    // inputs\n    this.userParams = userParams;\n    this.background = new Background(backgroundParams);\n    this.ctx = backgroundParams.canvas.getContext('2d');\n    this.img = backgroundParams.backgroundImage;\n    this.panoramaWidth = this.img.width;\n    this.panoramaHeight = this.img.height;\n    this.canvasWidth = backgroundParams.canvas.width;\n    this.canvasHeight = backgroundParams.canvas.height;\n    this.predatorsController = new PredatorsController(userParams.predatorsParams(), this.ctx, this.panoramaWidth, this.panoramaHeight);\n    this.preyController = new PreyController(userParams.preysParams(), this.ctx, this.panoramaWidth, this.panoramaHeight);\n    this.predatorsController.receivePreysField(this.preyController.gravitationalField);\n    this.preyController.receivePredatorsField(this.predatorsController.gravitationalField);\n    // defaults\n    this.dx = 0;\n    this.isDampening = false;\n    this.cursorOffsetX = 0;\n  }\n\n  draw(dx) {\n    // console.log('new draw');\n    this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n    this.background.draw(this.dx);\n    this.preyController.calculateField();\n    this.predatorsController.calculateField();\n    this.preyController.updateDirections();\n    this.preyController.draw(this.dx);\n    this.predatorsController.draw(this.dx);\n    this.predatorsController.updateDirections();\n  }\n\n  updateDx() {\n    this.dampenStaleCursorInput();\n    this.dx += this.cursorOffsetX * 0.075;\n    this.dx = positiveMod(this.dx, this.panoramaWidth);\n  }\n\n  toggleDampening(bool) {\n    this.isDampening = bool;\n  }\n\n  dampenStaleCursorInput() {\n    if (this.isDampening) {\n      this.cursorOffsetX = this.cursorOffsetX * 0.8;\n      if (Math.abs(this.cursorOffsetX) < 1) {\n        this.cursorOffsetX = 0;\n      }\n    }\n  }\n\n  updateCursorOffset({x}) {\n    if (Math.abs(this.canvasWidth / 2 - x) > this.canvasWidth / 3) {\n      this.toggleDampening(false);\n      this.cursorOffsetX = x - (this.canvasWidth / 2);\n    } else {\n      this.toggleDampening(true);\n    }\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/panorama.js\n// module id = 1\n// module chunks = 0","export default class Background {\n  // eventually refactor into background and panorama classes\n  constructor({canvas, backgroundImage}) {\n    this.ctx = canvas.getContext('2d');\n    this.img = backgroundImage;\n    this.imageWidth = this.img.width;\n    this.imageHeight = this.img.height;\n    this.canvasWidth = canvas.width;\n    this.canvasHeight = canvas.height;\n    this.cursorOffsetX = 0;\n    this.dx = 0; // mainly for graceful error handling\n  }\n\n  draw(dx) {\n    // console.log('rendering bg');\n    this.dx = dx;\n    // future optimization: only redraw if any scrolling has occured\n    this.ctx.drawImage(this.img, -this.dx, 0);\n    // only perform second draw of stitched image when necessary\n    if (this.doesImageNeedStitching()) {\n      // console.log('rendering stitch');\n      this.ctx.drawImage(this.img, this.imageWidth - this.dx, 0);\n    }\n  }\n\n  doesImageNeedStitching() {\n    return this.dx > (this.imageWidth - this.canvasWidth);\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/background.js\n// module id = 2\n// module chunks = 0","import Predator from './predator';\nimport OrganismsController from './organisms_controller';\n\nexport default class PredatorsController extends OrganismsController {\n  constructor(predatorsParams, ctx, panoramaWidth, panoramaHeight) {\n    super(ctx, panoramaWidth, panoramaHeight, predatorsParams);\n    this.predatorParams = predatorsParams.predatorParams;\n    this.populatePredators(predatorsParams.count);\n    this.fieldEdgeSgn = 1;\n  }\n\n  populatePredators(count) {\n    for (let i = 0; i < count; i++) {\n      this.createPredator();\n    }\n  }\n\n  receivePreysField(field) {\n    this.preysField = field;\n  }\n\n  createPredator(predatorParams) {\n    const predator = new Predator(this.predatorParams, this.ctx, this.panoramaWidth, this.panoramaHeight);\n    this.organisms.push(predator);\n  }\n\n  updateDirections() {\n    this.organisms.forEach( organism => {\n      organism.constructGradient(this.preysField, this.gravitationNbhd, this.fieldNetSize);\n      organism.updateDirection();\n    });\n  }\n\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/predators_controller.js\n// module id = 3\n// module chunks = 0","import Organism from './organism';\n\nexport default class Predator extends Organism {\n  constructor(predatorParams, ctx, panoramaWidth, panoramaHeight) {\n    super(predatorParams, ctx, panoramaWidth, panoramaHeight);\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/predator.js\n// module id = 4\n// module chunks = 0","import { positiveMod, fieldCellCoords, gravitation,\n         distance, distanceX, distanceY } from '../util/util';\n\nexport default class Organism {\n  constructor({speed, radius, color}, ctx, panoramaWidth, panoramaHeight) {\n    this.ctx = ctx;\n    this.speed = speed;\n    this.radius = radius;\n    this.color = color;\n    this.panoramaWidth = panoramaWidth;\n    this.panoramaHeight = panoramaHeight;\n    this.initializeCenter();\n    this.initializeDirection();\n  }\n\n  initializeCenter() {\n    this.centerX = Math.random() * this.panoramaWidth;\n    this.centerY = Math.random() * (this.panoramaHeight - 2 * this.radius) + this.radius;\n  }\n\n  initializeDirection() {\n    // sample as an angle for a uniform radial distribution\n    // i.e. don't bias directions to the diagonals via a cartesian ransom sample\n    const radialDirection = Math.random() * 2 * Math.PI;\n    this.direction = {\n      x: Math.cos(radialDirection),\n      y: Math.sin(radialDirection)\n    };\n  }\n\n  draw(dx) {\n    this.moveOrganism();\n    this.renderOrganism(dx);\n  }\n\n  renderOrganism(dx) {\n    // console.log('rendering organism');\n    this.ctx.beginPath();\n    this.ctx.arc(positiveMod(this.centerX - dx, this.panoramaWidth), this.centerY, this.radius, 0, 2 * Math.PI);\n    this.ctx.fillStyle = this.color;\n    this.ctx.fill();\n  }\n\n  moveOrganism() {\n    this.centerX = positiveMod(this.centerX + this.xMovement(), this.panoramaWidth);\n    this.centerY += this.yMovement();\n    this.resolveBounces();\n  }\n\n  yMovement() {\n    return this.speed * this.direction.y;\n  }\n\n  xMovement() {\n    return this.speed * this.direction.x;\n  }\n\n  minHeight() {\n    return this.radius;\n  }\n\n  maxHeight() {\n    return this.panoramaHeight - this.radius;\n  }\n\n  resolveBounces() {\n    if (this.centerY > this.maxHeight()) {\n      const overflow = this.centerY - this.maxHeight();\n      this.centerY -= overflow;\n      this.direction.y = -1 * this.direction.y;\n    } else if (this.centerY < this.minHeight()) {\n      const underflow = this.minHeight() - this.centerY;\n      this.centerY += underflow;\n      this.direction.y = -1 * this.direction.y;\n    }\n  }\n\n  // calculate the current position in the discrete field\n  updateFieldPosition(fieldNetSize) {\n    // debugger;\n    this.fieldPosition = fieldCellCoords(this.centerX, this.centerY, fieldNetSize);\n  }\n\n  // use the field of other organisms to construct a gradient\n  constructGradient(field, gravitationNbhd, fieldNetSize) {\n    this.gradient = {\n      x: 0,\n      y: 0\n    };\n    for (let row = this.fieldPosition.y - gravitationNbhd; row < this.fieldPosition.y + gravitationNbhd; row++) {\n      for (let col = this.fieldPosition.x - gravitationNbhd; col < this.fieldPosition.x + gravitationNbhd; col++) {\n        let proxyCol = col;\n        if (row < 0 || row >= this.panoramaHeight / fieldNetSize) continue;\n        if (proxyCol < 0 || proxyCol >= this.panoramaWidth / fieldNetSize) proxyCol = positiveMod(proxyCol, Math.floor(this.panoramaWidth / fieldNetSize));\n        if (col === this.fieldPosition.x || row === this.fieldPosition.y) continue;\n        const dist = distance(col, row, this.fieldPosition.x, this.fieldPosition.y, this.panoramaWidth);\n        const weight = gravitation(dist);\n        const xDist = distanceX(this.fieldPosition.x, col, this.panoramaWidth);\n        const yDist = distanceY(this.fieldPosition.y, row);\n        const sin = yDist / dist;\n        const cos = xDist / dist;\n        const sgnX = (col > this.fieldPosition.x) ? 1 : -1 ;\n        const sgnY = (row > this.fieldPosition.y) ? 1 : -1 ;\n        this.gradient.x += field[row][proxyCol] * cos * weight * sgnX;\n        this.gradient.y += field[row][proxyCol] * sin * weight * sgnY;\n      }\n    }\n  }\n\n  updateDirection() {\n    const totalSpeed = Math.sqrt( Math.pow(this.direction.x + (this.gradient.x / 10), 2) +\n                                  Math.pow(this.direction.y + (this.gradient.y / 10), 2));\n    const normalization = 1 / totalSpeed;\n    this.direction.x = (this.direction.x + (this.gradient.x / 10)) * normalization;\n    this.direction.y = (this.direction.y + (this.gradient.y / 10)) * normalization;\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/organism.js\n// module id = 5\n// module chunks = 0","import Prey from './prey';\nimport OrganismsController from './organisms_controller';\n\nexport default class PredatorsController extends OrganismsController {\n  constructor(preysParams, ctx, panoramaWidth, panoramaHeight) {\n    super(ctx, panoramaWidth, panoramaHeight, preysParams);\n    this.preyParams = preysParams.preyParams;\n    this.populatePreys(preysParams.count);\n    this.fieldEdgeSgn = -1;\n  }\n\n  populatePreys(count) {\n    for (let i = 0; i < count; i++) {\n      this.createPrey();\n    }\n  }\n\n  receivePredatorsField(field) {\n    this.predatorsField = field;\n  }\n\n  createPrey(preyParams) {\n    const prey = new Prey(this.preyParams, this.ctx, this.panoramaWidth, this.panoramaHeight);\n    this.organisms.push(prey);\n  }\n\n  updateDirections() {\n    this.organisms.forEach( organism => {\n      organism.constructGradient(this.predatorsField, this.gravitationNbhd, this.fieldNetSize);\n      organism.flipGradient();\n      organism.updateDirection();\n    });\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/prey_controller.js\n// module id = 6\n// module chunks = 0","// basically a reducer...\nexport default class Controls {\n  constructor(backgroundImage) {\n    //set defaults\n    this.predatorCount = 10;\n    this.predatorSpeed = 20;\n    this.predatorRadius = 40;\n    this.predatorColor = '#bc482b';\n    this.preyCount = 100;\n    this.preySpeed = 10;\n    this.preyRadius = 20;\n    this.preyColor = '#4c6ea5';\n    this.backgroundImage = backgroundImage;\n  }\n\n  predatorsParams() {\n    return {\n      fieldNetSize: 10, // Must be smaller than radius/sqrt(2)!\n      gravitationNbhd: 10,\n      count: this.predatorCount,\n      predatorParams: {\n        speed: this.predatorSpeed,\n        radius: this.predatorRadius,\n        color: this.predatorColor\n      }\n    };\n  }\n\n  preysParams() {\n    return {\n      fieldNetSize: 10, // Must be smaller than radius/sqrt(2)!\n      gravitationNbhd: 20,\n      count: this.preyCount,\n      preyParams: {\n        speed: this.preySpeed,\n        radius: this.preyRadius,\n        color: this.preyColor\n      }\n    };\n  }\n\n  setListeners() {\n    // will set several event listeners in document to grab user input\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/user_params.js\n// module id = 7\n// module chunks = 0","import Organism from './organism';\n\nexport default class Prey extends Organism {\n  constructor(preyParams, ctx, panoramaWidth, panoramaHeight) {\n    super(preyParams, ctx, panoramaWidth, panoramaHeight);\n  }\n\n  flipGradient() {\n    // run from the predators, not to them\n    this.gradient.x = -1 * this.gradient.x;\n    this.gradient.y = -1 * this.gradient.y;\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/prey.js\n// module id = 8\n// module chunks = 0","export const positiveMod = (n, m) => (\n  ((n % m) + m) % m\n);\n\n// computed the horizontal distance between two points\n// accounting for the panorama's wrapping\nexport const distanceX = (x1, x2, panoramaWidth) => {\n  const smaller = Math.min(x1, x2);\n  const larger = Math.max(x1, x2);\n  const innerDistance = larger - smaller;\n  const outerDistance = smaller + panoramaWidth - smaller;\n  return Math.min(innerDistance, outerDistance);\n};\n\nexport const distanceY = (y1, y2) => {\n  return Math.abs(y2 - y1);\n};\n\nexport const distance = (x1, y1, x2, y2, panoramaWidth) => {\n  return Math.sqrt(Math.pow(distanceY(y1, y2), 2) +\n                   Math.pow(distanceX(x1, x2, panoramaWidth), 2));\n};\n\nexport const fieldCellCoords = (x, y, fieldNetSize) => ({\n  x: Math.floor(x / fieldNetSize),\n  y: Math.floor(y / fieldNetSize)\n});\n\nexport const gravitation = dist => {\n  if (dist === 0) {\n    // avoid singularities;\n    return 100;\n  } else {\n    return Math.pow(dist, -2);\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./util/util.js\n// module id = 9\n// module chunks = 0","import { distance, distanceY, positiveMod, gravitation } from '../util/util';\n\nexport default class OrganismsController {\n  constructor(ctx, panoramaWidth, panoramaHeight, {fieldNetSize, gravitationNbhd}) {\n    this.ctx = ctx;\n    this.panoramaWidth = panoramaWidth;\n    this.panoramaHeight = panoramaHeight;\n    this.organisms = [];\n    this.fieldNetSize = fieldNetSize;\n    this.gravitationNbhd = gravitationNbhd;\n    this.initializeField();\n  }\n\n\n\n  draw(dx) {\n    this.organisms.forEach( organism => {\n      organism.draw(dx);\n    });\n  }\n\n  initializeField() {\n    const rowCount = Math.ceil(this.panoramaHeight / this.fieldNetSize);\n    const colCount = Math.ceil(this.panoramaWidth / this.fieldNetSize);\n    this.gravitationalField = Array(rowCount).fill(0).map(el => (\n      Array(colCount).fill(0)\n    ));\n  }\n\n  resetField() {\n    // needs to be in the same object\n    const rows = Object.keys(this.gravitationalField);\n    const centerRow = rows[Math.floor(rows.length/2)];\n    // console.log(centerRow);\n    rows.forEach( row => {\n      const cols = Object.keys(this.gravitationalField[row]);\n      const dRowCenter = distanceY(centerRow, row);\n      cols.forEach( col => {\n        // prevent clustering on edges\n        this.gravitationalField[row][col] = this.fieldEdgeSgn*(dRowCenter / centerRow)/1000;\n      });\n    });\n    // debugger;\n  }\n\n  calculateField() {\n    this.resetField();\n    this.organisms.forEach( organism => {\n      this.updateField(organism);\n    });\n  }\n\n  updateField(organism) {\n    organism.updateFieldPosition(this.fieldNetSize);\n    const position = organism.fieldPosition;\n    for(let row = position.y - this.gravitationNbhd; row < position.y + this.gravitationNbhd; row++) {\n      for(let col = position.x - this.gravitationNbhd; col < position.x + this.gravitationNbhd; col++) {\n        // JS will get mad if you try to change the iterator mid loop.\n        let proxyCol = col;\n        if (row < 0 || row >= this.panoramaHeight / this.fieldNetSize) continue;\n        if (proxyCol < 0 || proxyCol >= this.panoramaWidth / this.fieldNetSize) proxyCol = positiveMod(proxyCol, Math.floor(this.panoramaWidth / this.fieldNetSize));\n        const pointVector = gravitation(distance(position.x, position.y, proxyCol, row, this.panoramaWidth));\n        this.gravitationalField[row][proxyCol] += pointVector;\n      }\n    }\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/organisms_controller.js\n// module id = 10\n// module chunks = 0"],"sourceRoot":""}
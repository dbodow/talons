{"version":3,"sources":["webpack:///webpack/bootstrap 24ad09259b67a1af98c4","webpack:///./util/util.js","webpack:///./src/organism.js","webpack:///./src/organisms_controller.js","webpack:///./src/main.js","webpack:///./src/panorama.js","webpack:///./src/background.js","webpack:///./src/predators_controller.js","webpack:///./src/predator.js","webpack:///./src/prey.js","webpack:///./src/simulation_params.js","webpack:///./src/simulation.js","webpack:///./src/zoo.js","webpack:///./src/preys_controller.js","webpack:///./src/field.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;AC7DA;;AAEA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA,CAAC;AAAA;AAAA;;AAED;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;AC9CA;;AAGyC;;AAEzC;AACA,eAAe,qBAAqB;AACpC;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,cAAc;AAClC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;AC3EA;;AAEwD;;AAExD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AAAA;AAAA;;;;;;;;;;;AChCA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;ACZD;;AAEA;AACmC;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAsB,EAAE;AACxB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;AACL;;;AAGA;AAAA;AAAA;;;;;;;;ACnFA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;;AC/BA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,sBAAsB;AAC3C,mBAAmB,WAAW;AAC9B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AAAA;AAAA;;;;;;;;;AC1CA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;;ACtBA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;ACRA;;AAEA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;;AC5CA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK,MAAM;AACX;AACA;AAAA;AAAA;;;;;;;;;;;ACtBA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACxDA;;AAEA;AACA;AAC0B;;;AAG1B;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,kBAAkB;AACnC,mBAAmB,WAAW;AAC9B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AAAA;AAAA;;;;;;;;AChDA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,oDAAoD,yCAAyC;AAC7F,sDAAsD,yCAAyC;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,8CAA8C;AACxG,4DAA4D,8CAA8C;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 24ad09259b67a1af98c4","'use strict';\n\nexport const positiveMod = (n, m) => (\n  ((n % m) + m) % m\n);\n\n// computed the horizontal distance between two points\n// accounting for the panorama's wrapping\nexport const distanceX = (x1, x2, panoramaWidth) => {\n  const smaller = Math.min(x1, x2);\n  const larger = Math.max(x1, x2);\n  const innerDistance = larger - smaller;\n  const outerDistance = smaller + panoramaWidth - smaller;\n  return Math.min(innerDistance, outerDistance);\n};\n\nexport const distanceY = (y1, y2) => {\n  return Math.abs(y2 - y1);\n};\n\nexport const distance = (x1, y1, x2, y2, panoramaWidth) => {\n  return Math.sqrt(Math.pow(distanceY(y1, y2), 2) +\n                   Math.pow(distanceX(x1, x2, panoramaWidth), 2));\n};\n\nexport const fieldCellCoords = (x, y, fieldNetSize) => ({\n  x: Math.floor(x / fieldNetSize),\n  y: Math.floor(y / fieldNetSize)\n});\n\nexport const gravitation = dist => {\n  if (dist === 0) {\n    // avoid singularities;\n    return 100;\n  } else {\n    return Math.pow(dist, -2);\n  }\n};\n\n// inspired by https://stackoverflow.com/questions/1114465/getting-mouse-location-in-canvas\nexport const getMousePos = (canvas, e) => {\n  const rect = canvas.getBoundingClientRect();\n  return {\n    x: e.clientX - rect.left,\n    y: e.clientY - rect.top\n  };\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./util/util.js\n// module id = 0\n// module chunks = 0","'use strict';\n\nimport { positiveMod, fieldCellCoords, gravitation,\n         distance, distanceX, distanceY } from '../util/util';\n\nexport default class Organism {\n  constructor({speed, radius, color}, panoramaSize) {\n    this.speed = speed;\n    this.radius = radius;\n    this.color = color;\n    this.initializeCenter(panoramaSize);\n    this.initializeDirection();\n  }\n\n  initializeCenter({width, height}) {\n    this.center = {\n      x: Math.random() * width,\n      y: (Math.random() * (height - (2 * this.radius))) + this.radius\n    };\n  }\n\n  initializeDirection() {\n    // sample as an angle for a uniform radial distribution\n    // i.e. don't bias directions to the diagonals via a cartesian ransom sample\n    const radialDirection = Math.random() * 2 * Math.PI;\n    this.direction = {\n      x: Math.cos(radialDirection),\n      y: Math.sin(radialDirection)\n    };\n  }\n\n  moveOrganism({width, height}) {\n    this.center = {\n      x: positiveMod(this.center.x + this.dxdt(), width),\n      y: this.center.y + this.dydt()\n    };\n    this.resolveBounces(height);\n  }\n\n  dydt() {\n    return this.speed * this.direction.y;\n  }\n\n  dxdt() {\n    return this.speed * this.direction.x;\n  }\n\n  minHeight() {\n    return this.radius;\n  }\n\n  maxHeight(height) {\n    return height - this.radius;\n  }\n\n  resolveBounces(height) {\n    if (this.center.y > this.maxHeight(height)) {\n      const overflow = this.center.y - this.maxHeight(height);\n      this.center.y -= overflow;\n      this.direction.y = -1 * this.direction.y;\n    } else if (this.center.y < this.minHeight()) {\n      const underflow = this.minHeight() - this.center.y;\n      this.center.y += underflow;\n      this.direction.y = -1 * this.direction.y;\n    }\n  }\n\n  // updateDirection(field) {\n  //   const gradient = field.constructGradient(this.center);\n  //   const totalSpeed = Math.sqrt( Math.pow(this.direction.x + (gradient.x / 10), 2) +\n  //                                 Math.pow(this.direction.y + (gradient.y / 10), 2) );\n  //   const normalization = 1 / totalSpeed;\n  //   this.direction.x = (this.direction.x + (gradient.x / 10)) * normalization;\n  //   this.direction.y = (this.direction.y + (gradient.y / 10)) * normalization;\n  // }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/organism.js\n// module id = 1\n// module chunks = 0","'use strict';\n\nimport { distance, distanceY, positiveMod, gravitation } from '../util/util';\n\nexport default class OrganismsController {\n  constructor() {\n    this.organisms = [];\n  }\n\n  moveOrganisms(panoramaSize, field) {\n    // this.updateDirections(field);\n    this.organisms.forEach( organism => {\n      organism.moveOrganism(panoramaSize);\n    });\n  }\n\n  // updateDirections(field) {\n  //   this.organisms.forEach( organism => {\n  //     // organism.constructGradient(this.preysField, this.gravitationNbhd, this.fieldNetSize);\n  //     organism.updateDirection(field);\n  //   });\n  // }\n\n  // killOrganisms(condemnedList) {\n  //   condemnedList.forEach( organism => {\n  //     const condemnedIdx = this.organisms.indexOf(organism);\n  //     // debugger;\n  //     this.organisms.splice(condemnedIdx, 1);\n  //     // const survivors = this.organisms.slice(0, condemnedIdx).concat(this.organisms.slice(condemnedIdx + 1));\n  //     // this.organisms = survivors;\n  //   });\n  // }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/organisms_controller.js\n// module id = 2\n// module chunks = 0","'use strict';\n\nimport SimulationParams from './simulation_params';\nimport Simulation from './simulation';\n\n// This file manages interaction with the HTML document\n\ndocument.addEventListener(\"DOMContentLoaded\", function(event) {\n  const canvas = document.getElementById(\"canvas\");\n  const simulationParams = new SimulationParams;\n  const simulation = new Simulation(canvas, simulationParams);\n  simulation.begin();\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/main.js\n// module id = 3\n// module chunks = 0","'use strict';\n\nimport Background from './background';\nimport { positiveMod, getMousePos } from '../util/util';\n\n// handles all logic for the wrapping panorama and drawing all canvas items\n// in particular, tracks offset for drawing based on user scroll\nexport default class Panorama {\n  constructor(canvas) {\n    this.background = new Background(canvas);\n    this.ctx = canvas.getContext('2d');\n    this.panoramaSize = this.background.imageSize;\n    this.canvasSize = this.background.canvasSize;\n\n    this.dx = 0;\n    this.isDampening = false;\n    this.cursorOffsetX = 0;\n\n    this.setCanvasListeners(canvas);\n  }\n\n  draw(zoo) {\n    this.ctx.clearRect(0, 0, this.canvasSize.width, this.canvasSize.height);\n    this.background.draw(this.dx);\n    this.drawOrganisms(zoo.preysController);\n    this.drawOrganisms(zoo.predatorsController);\n  }\n\n  drawOrganisms(controller) {\n    controller.organisms.forEach( organism => {\n      this.drawOrganism(organism);\n    });\n  }\n\n  drawOrganism(organism) {\n    // debugger;\n    this.ctx.beginPath();\n    this.ctx.arc(positiveMod(organism.center.x - this.dx, this.panoramaSize.width),\n                 organism.center.y, organism.radius, 0, 2 * Math.PI);\n    this.ctx.fillStyle = organism.color;\n    this.ctx.fill();\n  }\n\n  updateDx() {\n    this.dampenStaleCursorInput();\n    this.dx += this.cursorOffsetX * 0.075;\n    this.dx = positiveMod(this.dx, this.panoramaSize.width);\n  }\n\n  toggleDampening(bool) {\n    this.isDampening = bool;\n  }\n\n  dampenStaleCursorInput() {\n    if (this.isDampening) {\n      this.cursorOffsetX = this.cursorOffsetX * 0.8;\n      if (Math.abs(this.cursorOffsetX) < 1) {\n        this.cursorOffsetX = 0;\n      }\n    }\n  }\n\n  updateCursorOffset({x}) {\n    if (Math.abs(this.canvasSize.width / 2 - x) > this.canvasSize.width / 3) {\n      this.toggleDampening(false);\n      this.cursorOffsetX = x - (this.canvasSize.width / 2);\n    } else {\n      this.toggleDampening(true);\n    }\n  }\n\n  setCanvasListeners(canvas) {\n    canvas.addEventListener('mousemove', e => {\n      const mousePos = getMousePos(canvas, e);\n      this.updateCursorOffset(mousePos);\n    });\n\n    canvas.addEventListener('mouseout', () => {\n      this.toggleDampening(true);\n    });\n  }\n\n\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/panorama.js\n// module id = 4\n// module chunks = 0","'use strict';\n\nconst backgroundPath = 'https://s3-us-west-1.amazonaws.com/talons-dev/placeholder-background.jpeg';\n\nexport default class Background {\n  // eventually refactor into background and panorama classes\n  constructor(canvas) {\n    this.ctx = canvas.getContext('2d');\n    this.img = new Image;\n    this.img.src = backgroundPath;\n    this.imageSize = {\n      width: this.img.width,\n      height: this.img.height\n    };\n    this.canvasSize = {\n      width: canvas.width,\n      height: canvas.height\n    };\n  }\n\n  draw(dx) {\n    this.ctx.drawImage(this.img, -dx, 0);\n    // only perform second draw of stitched image when necessary\n    if (this.doesImageNeedStitching(dx)) {\n      this.ctx.drawImage(this.img, this.imageSize.width - dx, 0);\n    }\n  }\n\n  doesImageNeedStitching(dx) {\n    return dx > (this.imageSize.width - this.canvasSize.width);\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/background.js\n// module id = 5\n// module chunks = 0","'use strict';\n\nimport Predator from './predator';\nimport OrganismsController from './organisms_controller';\n\nexport default class PredatorsController extends OrganismsController {\n  constructor(predatorsParams, panoramaSize) {\n    super();\n    this.populatePredators(predatorsParams, panoramaSize);\n  }\n\n  populatePredators({count, predatorParams}, panoramaSize) {\n    for (let i = 0; i < count; i++) {\n      this.createPredator(predatorParams, panoramaSize);\n    }\n  }\n\n  createPredator(predatorParams, panoramaSize) {\n    const predator = new Predator(predatorParams, panoramaSize);\n    this.organisms.push(predator);\n  }\n\n  // feed() {\n  //   const eaten = [];\n  //   this.organisms.forEach( predator => {\n  //     const food = predator.feed(this.preysLocations);\n  //     if (food) eaten.push(food);\n  //   });\n  //   // console.log('eaten ', eaten);\n  //   return Array.from(new Set(eaten));\n  // }\n  //\n  // starvePredators() {\n  //   const starved = [];\n  //   const currentTime = Date.now();\n  //   this.organisms.forEach( predator => {\n  //     if (currentTime - predator.lastAte > predator.efficiency) {\n  //       starved.push(predator);\n  //     }\n  //   });\n  //   this.killOrganisms(starved);\n  // }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/predators_controller.js\n// module id = 6\n// module chunks = 0","'use strict';\n\nimport Organism from './organism';\n\nexport default class Predator extends Organism {\n  constructor(predatorParams, panoramaSize) {\n    super(predatorParams, panoramaSize);\n    this.lastAte = Date.now();\n    this.efficiency = predatorParams.efficiency;\n  }\n\n  // feed(locations) {\n  //   // debugger;\n  //   const food = locations[this.fieldPosition.y][this.fieldPosition.x];\n  //   if (food) {\n  //     // if (Math.abs(food.centerX - this.centerX) > 10) console.log('problem, ', Date.now());\n  //     if (Math.abs(food.centerX - this.centerX) <= 10) console.log('no problem');\n  //     // console.log('food ', food, \"me: \", this.centerX, this.centerY);\n  //     this.lastAte = Date.now();\n  //     return food;\n  //   }\n  // }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/predator.js\n// module id = 7\n// module chunks = 0","'use strict';\n\nimport Organism from './organism';\n\nexport default class Prey extends Organism {\n  constructor(preyParams, panoramaSize) {\n    super(preyParams, panoramaSize);\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/prey.js\n// module id = 9\n// module chunks = 0","'use strict';\n\n// SimulationParams: controls the parameters for the simulation.\n// Allows users to adjust input; manages event listeners to\n// determine this input.\nexport default class SimulationParams {\n  constructor() {\n    //set defaults\n    this.predatorCount = 10;\n    this.predatorSpeed = 20;\n    this.predatorRadius = 40;\n    this.predatorGravitationNbhd = 10;\n    this.predatorColor = '#bc482b';\n    this.predatorEfficiency = 2000000;\n    this.preyCount = 10;\n    this.preySpeed = 10;\n    this.preyRadius = 20;\n    this.preyGravitationNbhd = 20;\n    this.preyColor = '#4c6ea5';\n    this.fieldNetSize = 10; // Must be smaller than radius/sqrt(2)!\n  }\n\n  predatorsParams() {\n    return {\n      count: this.predatorCount,\n      predatorParams: {\n        speed: this.predatorSpeed,\n        radius: this.predatorRadius,\n        color: this.predatorColor,\n        efficiency: this.predatorEfficiency\n      }\n    };\n  }\n\n  preysParams() {\n    return {\n      count: this.preyCount,\n      preyParams: {\n        speed: this.preySpeed,\n        radius: this.preyRadius,\n        color: this.preyColor\n      }\n    };\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/simulation_params.js\n// module id = 11\n// module chunks = 0","'use strict';\n\nimport Panorama from './panorama';\nimport Zoo from './zoo';\n\nexport default class Simulation {\n  constructor(canvas, simulationParams) {\n    this.canvas = canvas;\n    this.simulationParams = simulationParams;\n    this.panorama = new Panorama(this.canvas);\n    this.zoo = new Zoo(this.simulationParams.predatorsParams(),\n                       this.simulationParams.preysParams(),\n                       this.panorama.panoramaSize);\n  }\n\n  begin() {\n    this.ticker = setInterval(() => {\n      this.panorama.updateDx();\n      this.zoo.tick();\n      this.panorama.draw(this.zoo);\n    }, 42); //42 mHz = 24 fps\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/simulation.js\n// module id = 12\n// module chunks = 0","'use strict';\n\nimport PredatorsController from './predators_controller';\nimport PreysController from './preys_controller';\nimport Field from './field';\n\nexport default class Zoo {\n  constructor(predatorsParams, preysParams, panoramaSize) {\n    this.panoramaSize = panoramaSize;\n    this.predatorsController = new PredatorsController(predatorsParams, panoramaSize);\n    this.preysController = new PreysController(preysParams, panoramaSize);\n    // this.predatorsField = new Field(panoramaSize, 1);\n    // this.preysField = new Field(panoramaSize, -1);\n  }\n\n  tick() {\n    this.moveOrganisms();\n    // this.calculateFields();\n  }\n\n  moveOrganisms() {\n    this.movePredators();\n    this.movePrey();\n  }\n\n  movePredators() {\n    this.predatorsController.moveOrganisms(this.panoramaSize, this.preysField);\n  }\n\n  movePrey() {\n    this.preysController.moveOrganisms(this.panoramaSize, this.predatorsField);\n  }\n\n  calculateFields() {\n    this.calculatePredatorsField();\n    this.calculatePreysField();\n  }\n\n  calculatePredatorsFields() {\n    this.predatorsField.calculateField(this.predatorsController);\n  }\n\n  calculatePreysFields() {\n    this.preysField.calculateField(this.preysController);\n  }\n}\n\n// this.preyController.calculateField();\n// this.predatorsController.calculateField();\n// this.preyController.updateDirections();\n// this.preyController.draw(this.dx);\n// this.predatorsController.draw(this.dx);\n// this.predatorsController.updateDirections();\n// this.preyController.updateLocations();\n// const eaten = this.predatorsController.feed();\n// this.preyController.killOrganisms(eaten);\n// this.predatorsController.starvePredators();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/zoo.js\n// module id = 13\n// module chunks = 0","'use strict';\n\nimport Prey from './prey';\nimport OrganismsController from './organisms_controller';\nimport { fieldCellCoords } from '../util/util';\n\n\nexport default class PreysController extends OrganismsController {\n  constructor(preysParams, panoramaSize) {\n    super();\n    this.populatePreys(preysParams, panoramaSize);\n  }\n\n  populatePreys({count, preyParams}, panoramaSize) {\n    for (let i = 0; i < count; i++) {\n      this.createPrey(preyParams, panoramaSize);\n    }\n  }\n\n  createPrey(preyParams, panoramaSize) {\n    const prey = new Prey(preyParams, panoramaSize);\n    this.organisms.push(prey);\n  }\n\n  // initializeLocations() {\n  //   const rowCount = Math.ceil(this.panoramaHeight / this.fieldNetSize);\n  //   const colCount = Math.ceil(this.panoramaWidth / this.fieldNetSize);\n  //   this.locations = Array(rowCount).fill(0).map(el => (\n  //     Array(colCount)\n  //   ));\n  // }\n  //\n  // resetLocations() {\n  //   this.locations.forEach( row => {\n  //     row.map( entry => null );\n  //   });\n  // }\n  //\n  // updateLocations() {\n  //   // debugger;\n  //   this.resetLocations();\n  //   this.organisms.forEach( organism => {\n  //     if (organism.fieldPosition === undefined) debugger;\n  //     if (this.locations[organism.fieldPosition.y] === undefined ) debugger;\n  //     // if (this.locations[organism.fieldPosition.y][organism.fieldPosition.x] !== null) console.log(organism);\n  //     this.locations[organism.fieldPosition.y][organism.fieldPosition.x] = organism;\n  //   });\n  // }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/preys_controller.js\n// module id = 14\n// module chunks = 0","'use strict';\n\nexport default class Field {\n  constructor(sgn) {\n\n  }\n\n  initializeField() {\n    const rowCount = Math.ceil(this.panoramaHeight / this.fieldNetSize);\n    const colCount = Math.ceil(this.panoramaWidth / this.fieldNetSize);\n    this.gravitationalField = Array(rowCount).fill(0).map(el => (\n      Array(colCount).fill(0)\n    ));\n  }\n\n  resetField() {\n    // needs to be in the same object\n    const rows = Object.keys(this.gravitationalField);\n    const centerRow = rows[Math.floor(rows.length/2)];\n    // console.log(centerRow);\n    rows.forEach( row => {\n      const cols = Object.keys(this.gravitationalField[row]);\n      const dRowCenter = distanceY(centerRow, row);\n      cols.forEach( col => {\n        // prevent clustering on edges\n        this.gravitationalField[row][col] = this.fieldEdgeSgn*(dRowCenter / centerRow)/1000;\n      });\n    });\n    // debugger;\n  }\n\n  calculateField(organismsController) {\n    this.resetField();\n    organismsController.organisms.forEach( organism => {\n      this.updateField(organism);\n    });\n  }\n\n  updateField(organism) {\n    organism.updateFieldPosition(this.fieldNetSize);\n    const position = organism.fieldPosition;\n    for(let row = position.y - this.gravitationNbhd; row < position.y + this.gravitationNbhd; row++) {\n      for(let col = position.x - this.gravitationNbhd; col < position.x + this.gravitationNbhd; col++) {\n        // JS will get mad if you try to change the iterator mid loop.\n        let proxyCol = col;\n        if (row < 0 || row >= this.panoramaHeight / this.fieldNetSize) continue;\n        if (proxyCol < 0 || proxyCol >= this.panoramaWidth / this.fieldNetSize) proxyCol = positiveMod(proxyCol, Math.floor(this.panoramaWidth / this.fieldNetSize));\n        const pointVector = gravitation(distance(position.x, position.y, proxyCol, row, this.panoramaWidth));\n        this.gravitationalField[row][proxyCol] += pointVector;\n      }\n    }\n  }\n\n  // calculate the current position in the discrete field for an organism\n  updateFieldPosition(fieldNetSize) {\n    // debugger;\n    this.fieldPosition = fieldCellCoords(this.centerX, this.centerY, fieldNetSize);\n  }\n\n  // use the field of other organisms to construct a gradient for an organism\n  constructGradient(panoramaCenter) {\n    this.gradient = {\n      x: 0,\n      y: 0\n    };\n    for (let row = this.fieldPosition.y - gravitationNbhd; row < this.fieldPosition.y + gravitationNbhd; row++) {\n      for (let col = this.fieldPosition.x - gravitationNbhd; col < this.fieldPosition.x + gravitationNbhd; col++) {\n        let proxyCol = col;\n        if (row < 0 || row >= this.panoramaHeight / fieldNetSize) continue;\n        if (proxyCol < 0 || proxyCol >= this.panoramaWidth / fieldNetSize) proxyCol = positiveMod(proxyCol, Math.floor(this.panoramaWidth / fieldNetSize));\n        if (col === this.fieldPosition.x || row === this.fieldPosition.y) continue;\n        const dist = distance(col, row, this.fieldPosition.x, this.fieldPosition.y, this.panoramaWidth);\n        const weight = gravitation(dist);\n        const xDist = distanceX(this.fieldPosition.x, col, this.panoramaWidth);\n        const yDist = distanceY(this.fieldPosition.y, row);\n        const sin = yDist / dist;\n        const cos = xDist / dist;\n        const sgnX = (col > this.fieldPosition.x) ? 1 : -1 ;\n        const sgnY = (row > this.fieldPosition.y) ? 1 : -1 ;\n        this.gradient.x += field[row][proxyCol] * cos * weight * sgnX;\n        this.gradient.y += field[row][proxyCol] * sin * weight * sgnY;\n      }\n    }\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/field.js\n// module id = 15\n// module chunks = 0"],"sourceRoot":""}